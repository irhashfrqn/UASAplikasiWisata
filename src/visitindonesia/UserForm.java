/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visitindonesia;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.*;

/**
 *
 * @author irhas
 */
public class UserForm extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    public UserForm() {
        initComponents();
        setTitle("User Dashboard");
//        setLocationRelativeTo(null);
        // Tampilkan nama user di label
        nameUserlabel.setText("Welcome, " + Session.getNama() + "!");
        
        resetButtonStyles();
        homeButton.setBackground(Color.BLUE);
        homeButton.setForeground(Color.WHITE);
        
        mainPanel.add(home, "home");
        mainPanel.add(wishlistPanel, "wishlist");
        mainPanel.add(profilePanel, "profile");
        
        home.add(indexWisataPanel, "indexWisata");
        home.add(detailWisataPanel, "detailWisata");
        

        
        loadProvinsi();
        
        // Tambahkan listener untuk memantau perubahan input
    newPassField.getDocument().addDocumentListener(new PasswordFieldListener());
    newrePassField.getDocument().addDocumentListener(new PasswordFieldListener());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        logoutBtn = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        home = new javax.swing.JPanel();
        indexWisataPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        pilihProvinsi = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        listWisataPanel = new javax.swing.JPanel();
        detailWisataPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        gambarLabel = new javax.swing.JLabel();
        deskripsiWisatalabel = new javax.swing.JLabel();
        namaWisataLabel = new javax.swing.JLabel();
        alamatWisataLabel = new javax.swing.JLabel();
        reviewWisataPanel = new javax.swing.JPanel();
        addtoWishlistButton = new javax.swing.JButton();
        addReviewWishlistButton = new javax.swing.JButton();
        provkotaLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        backtoIndexButton = new javax.swing.JButton();
        wishlistPanel = new javax.swing.JPanel();
        profilePanel = new javax.swing.JPanel();
        inProfilePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        newUsernameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        newNamaLengkapField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        changePassBtn = new javax.swing.JButton();
        saveNewProfileBtn = new javax.swing.JButton();
        showPassChangeChk = new javax.swing.JCheckBox();
        newrePassField = new javax.swing.JPasswordField();
        newPassField = new javax.swing.JPasswordField();
        errorLabel = new javax.swing.JLabel();
        usernamaWarning1 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reviewPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        nameUserlabel = new javax.swing.JLabel();
        homeButton = new javax.swing.JButton();
        wishlistButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();
        bgimage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(900, 500));
        setName("loginForm"); // NOI18N
        setResizable(false);

        jPanel1.setMaximumSize(new java.awt.Dimension(900, 500));
        jPanel1.setMinimumSize(new java.awt.Dimension(900, 500));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 500));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logoutBtn.setBackground(new java.awt.Color(255,255,255));
        logoutBtn.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        logoutBtn.setText("Log Out");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });
        jPanel1.add(logoutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 10, 90, 30));

        mainPanel.setBackground(new java.awt.Color(255,255,255, 175));
        mainPanel.setPreferredSize(new java.awt.Dimension(250, 350));
        mainPanel.setLayout(new java.awt.CardLayout());

        home.setBackground(new java.awt.Color(255, 255, 255));
        home.setName("home"); // NOI18N
        home.setLayout(new java.awt.CardLayout());

        indexWisataPanel.setBackground(new java.awt.Color(255, 255, 255));
        indexWisataPanel.setName("indexWisata"); // NOI18N
        indexWisataPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        jLabel6.setText("Pilih Provinsi");
        indexWisataPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 15, -1, -1));

        pilihProvinsi.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        pilihProvinsi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pilihProvinsiActionPerformed(evt);
            }
        });
        indexWisataPanel.add(pilihProvinsi, new org.netbeans.lib.awtextra.AbsoluteConstraints(705, 10, -1, -1));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        listWisataPanel.setBackground(new java.awt.Color(255, 255, 255));
        listWisataPanel.setAutoscrolls(true);
        listWisataPanel.setLayout(new javax.swing.BoxLayout(listWisataPanel, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane1.setViewportView(listWisataPanel);

        indexWisataPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 860, 380));

        home.add(indexWisataPanel, "card3");

        detailWisataPanel.setName("detailWisata"); // NOI18N
        detailWisataPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        detailWisataPanel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 520, 10));

        gambarLabel.setBackground(new java.awt.Color(204, 204, 204));
        detailWisataPanel.add(gambarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 428, 195));

        deskripsiWisatalabel.setText("deskripsi wisata");
        detailWisataPanel.add(deskripsiWisatalabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 450, 68));

        namaWisataLabel.setText("nama wisata");
        detailWisataPanel.add(namaWisataLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 219, 420, 30));

        alamatWisataLabel.setText("alamat wisata");
        detailWisataPanel.add(alamatWisataLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 450, 50));

        reviewWisataPanel.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout reviewWisataPanelLayout = new javax.swing.GroupLayout(reviewWisataPanel);
        reviewWisataPanel.setLayout(reviewWisataPanelLayout);
        reviewWisataPanelLayout.setHorizontalGroup(
            reviewWisataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
        );
        reviewWisataPanelLayout.setVerticalGroup(
            reviewWisataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );

        detailWisataPanel.add(reviewWisataPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, 310, 380));

        addtoWishlistButton.setText("Add to Wishlist");
        addtoWishlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoWishlistButtonActionPerformed(evt);
            }
        });
        detailWisataPanel.add(addtoWishlistButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 400, -1, 30));

        addReviewWishlistButton.setText("Add Review");
        addReviewWishlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReviewWishlistButtonActionPerformed(evt);
            }
        });
        detailWisataPanel.add(addReviewWishlistButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(748, 400, 120, 30));

        provkotaLabel.setText("prov-kabkota");
        detailWisataPanel.add(provkotaLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 460, 40));

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        detailWisataPanel.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, 10, 420));

        backtoIndexButton.setText("< Kembali");
        backtoIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backtoIndexButtonActionPerformed(evt);
            }
        });
        detailWisataPanel.add(backtoIndexButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, 100, 30));

        home.add(detailWisataPanel, "card3");

        mainPanel.add(home, "card2");

        wishlistPanel.setBackground(new java.awt.Color(255, 255, 255));
        wishlistPanel.setName("wishlist"); // NOI18N
        wishlistPanel.setLayout(new java.awt.GridLayout(1, 0));
        mainPanel.add(wishlistPanel, "card3");

        profilePanel.setBackground(new java.awt.Color(255, 255, 255));
        profilePanel.setName("profile"); // NOI18N
        profilePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        inProfilePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Profile");
        inProfilePanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 10, -1, -1));

        newUsernameField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newUsernameField.setText("username");
        newUsernameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newUsernameFieldFocusGained(evt);
            }
        });
        inProfilePanel.add(newUsernameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 250, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Username");
        inProfilePanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Password Baru");
        inProfilePanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, -1));

        newNamaLengkapField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newNamaLengkapField.setText("name");
        newNamaLengkapField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newNamaLengkapFieldFocusGained(evt);
            }
        });
        inProfilePanel.add(newNamaLengkapField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 250, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Nama Lengkap");
        inProfilePanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Password Baru Lagi");
        inProfilePanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));
        inProfilePanel.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 410, 10));

        changePassBtn.setText("Ganti Password");
        changePassBtn.setEnabled(false);
        changePassBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePassBtnActionPerformed(evt);
            }
        });
        inProfilePanel.add(changePassBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 340, 130, 30));

        saveNewProfileBtn.setText("Simpan");
        saveNewProfileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNewProfileBtnActionPerformed(evt);
            }
        });
        inProfilePanel.add(saveNewProfileBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 90, 30));

        showPassChangeChk.setText("Tampilkan Password");
        showPassChangeChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPassChangeChkActionPerformed(evt);
            }
        });
        inProfilePanel.add(showPassChangeChk, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 300, 130, -1));

        newrePassField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newrePassField.setText("jPasswordField1");
        newrePassField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newrePassFieldFocusGained(evt);
            }
        });
        inProfilePanel.add(newrePassField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, 250, 30));

        newPassField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newPassField.setText("jPasswordField1");
        newPassField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                newPassFieldFocusGained(evt);
            }
        });
        inProfilePanel.add(newPassField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 230, 250, 30));

        errorLabel.setText(".");
        inProfilePanel.add(errorLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 240, 40));

        usernamaWarning1.setText(".");
        inProfilePanel.add(usernamaWarning1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 90, 250, 40));

        profilePanel.add(inProfilePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, 410, 380));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Review Saya");
        profilePanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 100, -1));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        reviewPanel.setLayout(new javax.swing.BoxLayout(reviewPanel, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane2.setViewportView(reviewPanel);

        profilePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 430, 380));

        mainPanel.add(profilePanel, "card5");

        jPanel1.add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 880, 440));

        jLabel2.setFont(new java.awt.Font("Bahnschrift", 0, 24)); // NOI18N
        jLabel2.setText("Visit Indonesia");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        nameUserlabel.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        nameUserlabel.setText("nama user");
        nameUserlabel.setAlignmentY(0.0F);
        jPanel1.add(nameUserlabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, 250, -1));

        homeButton.setBackground(new java.awt.Color(255,255,255));
        homeButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        jPanel1.add(homeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 100, 30));

        wishlistButton.setBackground(new java.awt.Color(255,255,255));
        wishlistButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        wishlistButton.setText("Wishlist");
        wishlistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wishlistButtonActionPerformed(evt);
            }
        });
        jPanel1.add(wishlistButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 100, 30));

        profileButton.setBackground(new java.awt.Color(255,255,255));
        profileButton.setFont(new java.awt.Font("Bahnschrift", 0, 14)); // NOI18N
        profileButton.setText("Profile");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });
        jPanel1.add(profileButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 100, 30));

        bgimage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/padar-resize.jpg"))); // NOI18N
        jPanel1.add(bgimage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 500));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        logout();
        
    }//GEN-LAST:event_logoutBtnActionPerformed

    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "home");
        resetButtonStyles();
        homeButton.setBackground(Color.BLUE);
        homeButton.setForeground(Color.WHITE);
    }//GEN-LAST:event_homeButtonActionPerformed

    private void wishlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wishlistButtonActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "wishlist");
        resetButtonStyles();
        wishlistButton.setBackground(Color.BLUE);
        wishlistButton.setForeground(Color.WHITE);
        loadWishlist();
    }//GEN-LAST:event_wishlistButtonActionPerformed

    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "profile");
        resetButtonStyles();
        profileButton.setBackground(Color.BLUE);
        profileButton.setForeground(Color.WHITE);
        loadReviews();
        loadProfilePanel();
    }//GEN-LAST:event_profileButtonActionPerformed

    private void pilihProvinsiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pilihProvinsiActionPerformed
        String selectedProvinsi = (String) pilihProvinsi.getSelectedItem();
        if (selectedProvinsi != null && !selectedProvinsi.isEmpty()) {
            loadWisataByProvinsi(selectedProvinsi);
        }
    }//GEN-LAST:event_pilihProvinsiActionPerformed

    private void addtoWishlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoWishlistButtonActionPerformed
        
    }//GEN-LAST:event_addtoWishlistButtonActionPerformed

    private void backtoIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backtoIndexButtonActionPerformed
        CardLayout cardLayout = (CardLayout) home.getLayout();
        cardLayout.show(home, "indexWisata");
    }//GEN-LAST:event_backtoIndexButtonActionPerformed

    private void addReviewWishlistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReviewWishlistButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addReviewWishlistButtonActionPerformed

    private void saveNewProfileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveNewProfileBtnActionPerformed
        
        changeUserNameProfile();
        
        
    }//GEN-LAST:event_saveNewProfileBtnActionPerformed

    private void newUsernameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newUsernameFieldFocusGained
        newUsernameField.setText("");
    }//GEN-LAST:event_newUsernameFieldFocusGained

    private void newNamaLengkapFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newNamaLengkapFieldFocusGained
        newNamaLengkapField.setText("");
    }//GEN-LAST:event_newNamaLengkapFieldFocusGained

    private void newPassFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newPassFieldFocusGained
        newPassField.setText("");
    }//GEN-LAST:event_newPassFieldFocusGained

    private void newrePassFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newrePassFieldFocusGained
        newrePassField.setText("");
    }//GEN-LAST:event_newrePassFieldFocusGained

    private void showPassChangeChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPassChangeChkActionPerformed
        togglePasswordVisibility();
    }//GEN-LAST:event_showPassChangeChkActionPerformed

    private void changePassBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePassBtnActionPerformed
        gantiPassword();
    }//GEN-LAST:event_changePassBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void logout() {
        // Hapus data sesi
        Session.setUsername(null);
        Session.setUserID(null);

        // Tutup form saat ini
        this.dispose();

        // Buka form login
        new Login().setVisible(true);
    }
    
    private class PasswordFieldListener implements javax.swing.event.DocumentListener {
        @Override
        public void insertUpdate(javax.swing.event.DocumentEvent e) {
            validatePasswords();
        }

        @Override
        public void removeUpdate(javax.swing.event.DocumentEvent e) {
            validatePasswords();
        }

        @Override
        public void changedUpdate(javax.swing.event.DocumentEvent e) {
            validatePasswords();
        }
    }
    
    private void validatePasswords() {
        String pass = new String(newPassField.getPassword());
        String rePass = new String(newrePassField.getPassword());

        if (pass.isEmpty() || rePass.isEmpty()) {
            errorLabel.setText("Password tidak boleh kosong.");
            changePassBtn.setEnabled(false);
        } else if (!pass.equals(rePass)) {
            errorLabel.setText("Password tidak cocok.");
            changePassBtn.setEnabled(false);
        } else {
            errorLabel.setText(""); // Clear error
            changePassBtn.setEnabled(true);
        }
    }
    
    private void togglePasswordVisibility() {
    if (showPassChangeChk.isSelected()) {
        newPassField.setEchoChar((char) 0); // Menampilkan password
        newrePassField.setEchoChar((char) 0);
    } else {
        newPassField.setEchoChar('*'); // Menyembunyikan password
        newrePassField.setEchoChar('*');
    }
}

// Ganti password
private void gantiPassword() {
    String newPass = new String(newPassField.getPassword());

    // Hash password sebelum disimpan
    String hashedPassword = HashUtils.hashPassword(newPass);

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
         PreparedStatement stmt = conn.prepareStatement("UPDATE users SET password = ? WHERE id = ?")) {

        stmt.setString(1, hashedPassword);
        stmt.setString(2, Session.getUserID());

        int rowsUpdated = stmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Password berhasil diganti. Silahkan Login Ulang", "Sukses", JOptionPane.INFORMATION_MESSAGE);
            this.dispose(); // Tutup form
            new Login().setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Gagal mengganti password. Silakan coba lagi.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Kesalahan koneksi database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private void navigateTo(String cardName, JButton activeButton) {
        // Tampilkan panel berdasarkan CardLayout
//        CardLayout.show(mainPanel, cardName);
        

        // Reset semua tombol ke default
        resetButtonStyles();

        // Set tombol aktif
        activeButton.setBackground(Color.BLUE);
        activeButton.setForeground(Color.WHITE);
    }
    
    private void resetButtonStyles() {
        // Reset semua tombol ke gaya default
        homeButton.setBackground(Color.LIGHT_GRAY);
        homeButton.setForeground(Color.BLACK);
        wishlistButton.setBackground(Color.LIGHT_GRAY);
        wishlistButton.setForeground(Color.BLACK);
        profileButton.setBackground(Color.LIGHT_GRAY);
        profileButton.setForeground(Color.BLACK);
    }
    
    private void loadProvinsi() {
//                    conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT DISTINCT provinsi FROM wisata")) {

            while (rs.next()) {
                pilihProvinsi.addItem(rs.getString("provinsi"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void loadWisataByProvinsi(String provinsi) {
        listWisataPanel.removeAll(); // Hapus semua komponen di panel
        listWisataPanel.revalidate();
        listWisataPanel.repaint();

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
             PreparedStatement stmt = conn.prepareStatement("SELECT id_wisata, nama_wisata, deskripsi, gambar FROM wisata WHERE provinsi = ?")) {

            stmt.setString(1, provinsi);
            ResultSet rs = stmt.executeQuery();

            // Menggunakan Layout yang lebih fleksibel untuk menata daftar wisata
            listWisataPanel.setLayout(new BoxLayout(listWisataPanel, BoxLayout.Y_AXIS)); // Menata secara vertikal

            while (rs.next()) {
                // Ambil data dari database

                String idWisata = rs.getString("id_wisata");
                String namaWisata = rs.getString("nama_wisata");
                String deskripsi = rs.getString("deskripsi");
                String gambarPath = "src/images/" + rs.getString("gambar"); // Path gambar

    //            System.out.println("Nama Wisata: " + namaWisata);
    //            System.out.println("Deskripsi: " + deskripsi);
    //            System.out.println("Gambar Path: " + gambarPath);

                // Panel untuk satu item wisata
                JPanel wisataPanel = new JPanel();
                wisataPanel.setLayout(new BoxLayout(wisataPanel, BoxLayout.Y_AXIS));
                wisataPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
                wisataPanel.setAlignmentX(Component.LEFT_ALIGNMENT); // Agar panel ini rata kiri

                // Panel untuk gambar
                JLabel gambarLabel = new JLabel();
                try {
                    ImageIcon icon = new ImageIcon(gambarPath);
                    Image img = icon.getImage().getScaledInstance(300, 180, Image.SCALE_SMOOTH); // Menyesuaikan ukuran gambar
                    gambarLabel.setIcon(new ImageIcon(img));
                    gambarLabel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
                } catch (Exception e) {
                    gambarLabel.setText("Gambar tidak tersedia");
                }

                // Panel untuk informasi wisata
                JPanel infoPanel = new JPanel();
                infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS)); // Mengatur elemen secara vertikal
                JLabel namaLabel = new JLabel("<html><font size='5'><b>" + namaWisata + "</b></font></html>");
                JLabel deskripsiLabel = new JLabel("<html><font size='3'>" + deskripsi + "</font></html>");
                namaLabel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 0)); // Jarak 10 piksel di sebelah kiri teks
                deskripsiLabel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 0)); // Jarak 10 piksel di sebelah kiri teks


                JButton lihatButton = new JButton("Lihat Wisata");
                lihatButton.setPreferredSize(new Dimension(130, 25)); // Ukuran tombol
                lihatButton.setMargin(new Insets(5, 5, 5, 5)); // Margin (atas, kiri, bawah, kanan)
                lihatButton.setFont(new Font("Arial", Font.BOLD, 16));
                lihatButton.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createEmptyBorder(5, 10, 5, 10), // Padding luar tombol
                    lihatButton.getBorder() // Border default tombol
                ));



                // Memberikan jarak antara gambar dan teks
                infoPanel.add(Box.createVerticalStrut(10)); // Jarak antara gambar dan informasi
                infoPanel.add(namaLabel);
                infoPanel.add(deskripsiLabel);
                infoPanel.add(lihatButton);

                // Menambahkan gambar ke wisataPanel
                wisataPanel.add(gambarLabel);
                wisataPanel.add(infoPanel);

                // Menambahkan wisataPanel ke listWisataPanel
                listWisataPanel.add(wisataPanel);

                // Event untuk tombol "Lihat Wisata"
                lihatButton.addActionListener(e -> {
                    showDetailWisata(idWisata);
                });
            }

            listWisataPanel.revalidate();
            listWisataPanel.repaint();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Method untuk menampilkan detail wisata
// Method untuk menampilkan detail wisata
private void showDetailWisata(String idWisata) {
    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
        PreparedStatement stmt = conn.prepareStatement("SELECT id_wisata, nama_wisata, deskripsi, alamat, provinsi, kabkota, gambar FROM wisata WHERE id_wisata = ?")) {
        
         // Cek apakah wisata sudah ada di wishlist
         
        String userId = Session.getUserID(); // Contoh: gunakan ID pengguna dari session
        
        
        stmt.setString(1, idWisata);
        ResultSet rs = stmt.executeQuery();

        if (rs.next()) {
            // Ambil data dari database
            String idwisata = rs.getString("id_wisata");
            String nama = rs.getString("nama_wisata");
            String deskripsi = rs.getString("deskripsi");
            String gambarPath = "src/images/" + rs.getString("gambar"); // Path gambar
            String alamatwisata = rs.getString("alamat");
            String prov = rs.getString("provinsi");
            String kabkota = rs.getString("kabkota");


            // Tampilkan gambar
            ImageIcon icon = new ImageIcon(gambarPath);
            Image img = icon.getImage().getScaledInstance(400, 250, Image.SCALE_SMOOTH);
            gambarLabel.setIcon(new ImageIcon(img));

            // Tampilkan nama wisata
            namaWisataLabel.setText("<html><h2> " + nama + "</h2></html>");

            // Tampilkan deskripsi wisata
            deskripsiWisatalabel.setText("<html> " + deskripsi + "</html>");
            
            //tampilkan alamat wisata
            alamatWisataLabel.setText("<html>Alamat : " + alamatwisata + "</html>");
            
            //tampilkan provinsi - kab/kota
            provkotaLabel.setText("<html>Provinsi : " + prov + " <br/> "+" Kab/Kota : "+ kabkota +"</html>");
            
            // Atur tombol wishlist berdasarkan status
            configureWishlistButton(idWisata);

            // Tampilkan review wisata
            loadReviewsForWisata(idwisata);
            
            // Event untuk tombol "Add Review"
            addReviewWishlistButton.addActionListener(e -> {
                String review = JOptionPane.showInputDialog(this, "Tulis review untuk " + nama + ":");
                if (review != null && !review.trim().isEmpty()) {
                    addReviewForWisata(idwisata, review);
                }
            });

            // Tampilkan detail wisata di homePanel
            CardLayout cardLayout = (CardLayout) home.getLayout();
            cardLayout.show(home, "detailWisata");
        } else {
            JOptionPane.showMessageDialog(this, "Detail wisata tidak ditemukan.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

private void configureWishlistButton(String idWisata) {
    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
         PreparedStatement checkStmt = conn.prepareStatement(
             "SELECT COUNT(*) AS countrow FROM wishlist WHERE user_id = ? AND wisata_id = ?")) {

        // Gantikan userId dengan ID pengguna yang sedang login
        String userId = Session.getUserID();
        checkStmt.setString(1, userId);
        checkStmt.setString(2, idWisata);

        ResultSet rs = checkStmt.executeQuery();
        rs.next();
        int count = rs.getInt("countrow");
        rs.close();

        // Hapus semua ActionListener sebelumnya dari tombol
        for (ActionListener al : addtoWishlistButton.getActionListeners()) {
            addtoWishlistButton.removeActionListener(al);
        }

        // Atur teks dan listener sesuai status wishlist
        if (count > 0) {
            addtoWishlistButton.setText("Hapus Wishlist");
            addtoWishlistButton.addActionListener(e -> {
                removeFromWishlist(idWisata);
                configureWishlistButton(idWisata); // Perbarui tombol setelah perubahan
            });
        } else {
            addtoWishlistButton.setText("Tambah Wishlist");
            addtoWishlistButton.addActionListener(e -> {
                addToWishlist(idWisata);
                configureWishlistButton(idWisata); // Perbarui tombol setelah perubahan
            });
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Gagal memuat status wishlist.");
    }
}


private void addToWishlist(String idWisata) {
    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
         PreparedStatement stmt = conn.prepareStatement("INSERT INTO wishlist (user_id, wisata_id) VALUES (?, ?)")) {

        String userId = Session.getUserID();
        stmt.setString(1, userId);
        stmt.setString(2, idWisata);
        stmt.executeUpdate();

        JOptionPane.showMessageDialog(this, "Berhasil ditambahkan ke wishlist!");
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Gagal menambahkan ke wishlist.");
    }
}

private void removeFromWishlist(String idWisata) {
    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
         PreparedStatement stmt = conn.prepareStatement("DELETE FROM wishlist WHERE user_id = ? AND wisata_id = ?")) {

        String userId = Session.getUserID();
        stmt.setString(1, userId);
        stmt.setString(2, idWisata);

        int rowsAffected = stmt.executeUpdate(); // Eksekusi penghapusan
        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(wishlistPanel, "Berhasil dihapus dari wishlist!");
        } else {
            JOptionPane.showMessageDialog(wishlistPanel, "Item tidak ditemukan di wishlist.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(wishlistPanel, "Gagal menghapus dari wishlist.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}



// Method untuk memuat review wisata
private void loadReviewsForWisata(String namaWisata) {
    reviewWisataPanel.removeAll();
    reviewWisataPanel.setLayout(new BoxLayout(reviewWisataPanel, BoxLayout.Y_AXIS));

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
         PreparedStatement stmt = conn.prepareStatement("SELECT r.id_review, u.username, u.nama_lengkap, r.id_wisata, r.rating, r.komentar, r.created_at AS review_date FROM reviews r JOIN  users u ON r.user_id = u.id JOIN wisata w ON r.id_wisata  = w.id_wisata WHERE r.id_wisata = ?")) {

        stmt.setString(1, namaWisata);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            String namaLengkap = rs.getString("nama_lengkap");
            String review = rs.getString("komentar");
            String reviewDate = rs.getString("review_date");

            // Buat panel untuk setiap review
            JPanel reviewPanel = new JPanel();
            reviewPanel.setLayout(new BoxLayout(reviewPanel, BoxLayout.Y_AXIS));
            reviewPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

            JLabel namaLabel = new JLabel("<html><b>" + namaLengkap + "</b></html>");
            JLabel reviewLabel = new JLabel("<html>" + review + "</html>");
            JLabel reviewDateLabel = new JLabel("<html>" + reviewDate + "</html>");

            reviewPanel.add(namaLabel);
            reviewPanel.add(reviewLabel);            
            reviewPanel.add(reviewDateLabel);


            reviewWisataPanel.add(reviewPanel);
        }

        reviewWisataPanel.revalidate();
        reviewWisataPanel.repaint();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

// Method untuk menambahkan review wisata
private void addReviewForWisata(String idWisata, String review) {
    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
         PreparedStatement stmt = conn.prepareStatement("INSERT INTO reviews (id_wisata, user_id, komentar) VALUES (?, ?, ?)")) {

        // Gantikan userName dengan nama pengguna yang sedang login
        String userId = Session.getUserID();
        System.out.println(userId);
        String userName = "User 1"; // Contoh: gunakan nama pengguna dari session
        stmt.setString(1, idWisata);
        stmt.setString(2, userId);
        stmt.setString(3, review);

        stmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Review berhasil ditambahkan!");

        // Refresh review panel
        loadReviewsForWisata(idWisata);
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Gagal menambahkan review.");
    }
}
private void loadWishlist() {
    wishlistPanel.removeAll(); // Hapus semua komponen sebelumnya

    // Gunakan GridLayout untuk membuat daftar vertikal
    JPanel listPanel = new JPanel();
    listPanel.setLayout(new GridLayout(0, 1, 0, 10)); // Kolom 1, jarak antar baris 10 piksel
    listPanel.setBackground(Color.WHITE);

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
         PreparedStatement stmt = conn.prepareStatement(
                 "SELECT w.id_wisata, w.nama_wisata, w.deskripsi, w.gambar, wl.id, w.alamat, w.provinsi, w.kabkota " +
                 "FROM wishlist wl " +
                 "JOIN wisata w ON wl.wisata_id = w.id_wisata " +
                 "WHERE wl.user_id = ?")) {

        String userId = Session.getUserID(); // Ganti dengan ID user yang sedang login
        System.out.println("User ID: " + userId); // Debug: pastikan userId tidak null
        stmt.setString(1, userId);

        ResultSet rs = stmt.executeQuery();

        if (!rs.isBeforeFirst()) { // Jika tidak ada data
            JLabel noDataLabel = new JLabel("Tidak ada data wishlist.");
            noDataLabel.setHorizontalAlignment(SwingConstants.CENTER);
            listPanel.add(noDataLabel);
        } else {
            while (rs.next()) {
                String idWisata = rs.getString("id_wisata");
                String namaWisata = rs.getString("nama_wisata");
                String deskripsi = rs.getString("deskripsi");
                String gambarPath = "src/images/" + rs.getString("gambar");
                int idWishlist = rs.getInt("id");
                String alamatwisata = rs.getString("alamat");
                String prov = rs.getString("provinsi");
                String kabkota = rs.getString("kabkota");

                // Panel untuk setiap item
                JPanel itemPanel = new JPanel();
                itemPanel.setLayout(new BorderLayout());
                itemPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY)); // Garis pembatas
                itemPanel.setPreferredSize(new Dimension(600, 100)); // Tinggi tiap item
                itemPanel.setBackground(Color.WHITE);

                // Gambar wisata
                JLabel gambarLabel = new JLabel();
                File gambarFile = new File(gambarPath);
                if (gambarFile.exists()) {
                    ImageIcon icon = new ImageIcon(new ImageIcon(gambarPath).getImage().getScaledInstance(240, 150, Image.SCALE_SMOOTH));
                    gambarLabel.setIcon(icon);
                } else {
                    System.err.println("Gambar tidak ditemukan: " + gambarPath);
                    gambarLabel.setText("Gambar tidak tersedia");
                }
                gambarLabel.setPreferredSize(new Dimension(240, 150));
                itemPanel.add(gambarLabel, BorderLayout.WEST);

                // Panel untuk teks
                JPanel textPanel = new JPanel();
                textPanel.setLayout(new BoxLayout(textPanel, BoxLayout.Y_AXIS));
                textPanel.setOpaque(false);
                textPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 0)); // Jarak 10 piksel di sebelah kiri teks

                JLabel namaLabel = new JLabel("<html><font size='5'><b>" + namaWisata + "</b></font></html>");
                JLabel deskripsiLabel = new JLabel("<html><font size='3'>" + deskripsi + "</font></html>");
                //tampilkan alamat wisata
                JLabel alamatWisataLabel = new JLabel("<html>Alamat : " + alamatwisata + "</html>");

                //tampilkan provinsi - kab/kota
                JLabel provkotaLabel = new JLabel("<html>Provinsi : " + prov + " <br/> "+" Kab/Kota : "+ kabkota +"</html>");
                
                textPanel.add(namaLabel);
                textPanel.add(Box.createVerticalStrut(5)); // Jarak antar teks
                textPanel.add(deskripsiLabel);
                textPanel.add(alamatWisataLabel);
                textPanel.add(provkotaLabel);

                itemPanel.add(textPanel, BorderLayout.CENTER);

                // Panel untuk tombol
                JPanel buttonPanel = new JPanel();
                buttonPanel.setLayout(new GridLayout(0, 1, 0, 10));
                buttonPanel.setOpaque(false);

                JButton hapusButton = new JButton("Hapus Wishlist");
                hapusButton.setPreferredSize(new Dimension(130, 25));
                hapusButton.addActionListener(e -> {
                    removeFromWishlist(idWisata);
                    loadWishlist(); // Reload wishlist setelah menghapus
                });
                
                JButton addReviewWlBtn = new JButton("Tambah Review");
                addReviewWlBtn.setPreferredSize(new Dimension(130, 25));
                
                
                addReviewWlBtn.addActionListener(e -> {
                    String reviewWl = JOptionPane.showInputDialog(this, "Tulis review untuk " + namaWisata + ":");
                    if (reviewWl != null && !reviewWl.trim().isEmpty()) {
                        addReviewForWisata(idWisata, reviewWl);
                    }
                });
                
                //button menampilkan detail wisata
                JButton detailWisataBtn = new JButton("Lihat Wisata");
                detailWisataBtn.setPreferredSize(new Dimension(130, 25));

                detailWisataBtn.addActionListener(e -> {
                    
                    // Buat panel untuk menampilkan detail wisata
                    JPanel detailPanel = new JPanel();
                    detailPanel.setLayout(new BorderLayout());
                    detailPanel.setPreferredSize(new Dimension(500, 250)); // Ukuran dialog
                    
                    // Bersihkan panel
                    detailPanel.removeAll();

                    // Gambar wisata
                    JLabel gambarLabelDet = new JLabel();
                    File gambarFileDet = new File(gambarPath);
                    if (gambarFile.exists()) {
                        ImageIcon icon = new ImageIcon(new ImageIcon(gambarPath).getImage().getScaledInstance(200, 140, Image.SCALE_SMOOTH));
                        gambarLabel.setIcon(icon);
                    } else {
                        gambarLabel.setText("Gambar tidak tersedia");
                        gambarLabel.setHorizontalAlignment(SwingConstants.CENTER);
                        gambarLabel.setPreferredSize(new Dimension(100, 100));
                    }
                    detailPanel.add(gambarLabel, BorderLayout.WEST); // Tambahkan gambar di kiri

                    // Panel untuk teks
                    JPanel textPanelDet = new JPanel();
                textPanelDet.setLayout(new BoxLayout(textPanelDet, BoxLayout.Y_AXIS));
                textPanelDet.setOpaque(false);
                textPanelDet.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0)); // Tambahkan jarak dengan gambar

                JLabel namaLabelDet = new JLabel("<html><font size='5'><b>" + namaWisata + "</b></font></html>");

                // Atur lebar maksimum teks deskripsi
                JLabel deskripsiLabelDet = new JLabel("<html><div style='width:200px;text-wrap: wrap;'>" + deskripsi + "</div></html>"); 
                
                //tampilkan alamat wisata
                JLabel alamatWisataLabelDet = new JLabel("<html>Alamat : " + alamatwisata + "</html>");

                //tampilkan provinsi - kab/kota
                JLabel provkotaLabelDet = new JLabel("<html>Provinsi : " + prov + " <br/> "+" Kab/Kota : "+ kabkota +"</html>");

                textPanelDet.add(namaLabelDet);
                textPanelDet.add(Box.createVerticalStrut(10)); // Tambahkan jarak antar teks
                textPanelDet.add(deskripsiLabelDet);
                textPanelDet.add(alamatWisataLabelDet);
                textPanelDet.add(provkotaLabelDet);

                detailPanel.add(textPanelDet, BorderLayout.CENTER); // Tambahkan teks di kanan


                    
                    // Tampilkan dialog menggunakan JOptionPane
                    JOptionPane.showMessageDialog(
                        null,
                        detailPanel,
                        "Detail Wisata",
                        JOptionPane.INFORMATION_MESSAGE
                    );
                    // Clear data setelah dialog ditutup
                    namaLabelDet = null;
                    deskripsiLabelDet = null;
                    gambarFileDet = null;
                    System.out.println("Data telah dihapus setelah dialog ditutup.");
                });
                


                buttonPanel.add(hapusButton);
                buttonPanel.add(addReviewWlBtn);
                buttonPanel.add(detailWisataBtn);
                itemPanel.add(buttonPanel, BorderLayout.EAST);

                listPanel.add(itemPanel);
                System.out.println("Panel untuk " + namaWisata + " berhasil ditambahkan."); // Debug
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(wishlistPanel, "Gagal memuat wishlist: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }

    // Bungkus listPanel dengan JScrollPane untuk scrolling
    JScrollPane scrollPane = new JScrollPane(listPanel);
    scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER); // Nonaktifkan scroll horizontal
    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);

    wishlistPanel.setLayout(new BorderLayout());
    wishlistPanel.add(scrollPane, BorderLayout.CENTER);

    // Refresh panel
    wishlistPanel.revalidate();
    wishlistPanel.repaint();
}

private void loadReviews() {
    reviewPanel.removeAll(); // Menghapus semua komponen sebelumnya
    
    String userId = Session.getUserID(); // ID user yang sedang login

    try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
         PreparedStatement stmt = conn.prepareStatement("SELECT r.id_review, w.nama_wisata, w.gambar, r.komentar, r.created_at " +
                 "FROM reviews r " +
                 "JOIN wisata w ON r.id_wisata = w.id_wisata " +
                 "WHERE r.user_id = ?")) {

        stmt.setString(1, userId);
        ResultSet rs = stmt.executeQuery();

        // Gunakan BoxLayout untuk reviewPanel agar vertikal
        reviewPanel.setLayout(new BoxLayout(reviewPanel, BoxLayout.Y_AXIS)); 

        while (rs.next()) {
            String idReview = rs.getString("id_review");
            String namaWisata = rs.getString("nama_wisata");
            String komentar = rs.getString("komentar");
            String createdAt = rs.getString("created_at");
            String gambarPath = "src/images/" + rs.getString("gambar"); // Gambar thumbnail

            // Panel untuk tiap review
            JPanel reviewItemPanel = new JPanel();
            reviewItemPanel.setLayout(new BorderLayout(10, 10)); // Gunakan BorderLayout untuk gambar, teks, dan tombol
            reviewItemPanel.setPreferredSize(new Dimension(300, 120));
            reviewItemPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

            // Panel untuk gambar
            JPanel imagePanel = new JPanel();
            imagePanel.setLayout(new BorderLayout());
            JLabel gambarLabel = new JLabel();
            File gambarFile = new File(gambarPath);

            if (gambarFile.exists()) {
                ImageIcon icon = new ImageIcon(new ImageIcon(gambarPath).getImage().getScaledInstance(100, 80, Image.SCALE_SMOOTH));
                gambarLabel.setIcon(icon);
            } else {
                gambarLabel.setText("Gambar tidak tersedia");
                gambarLabel.setHorizontalAlignment(SwingConstants.CENTER);
                gambarLabel.setPreferredSize(new Dimension(100, 80));
            }

            imagePanel.add(gambarLabel, BorderLayout.CENTER);

            // Panel untuk teks
            JPanel textPanel = new JPanel();
            textPanel.setLayout(new BoxLayout(textPanel, BoxLayout.Y_AXIS));
            textPanel.setOpaque(false);
            
            // Menampilkan nama wisata, komentar, dan waktu review
            JLabel namaWisataLabel = new JLabel("<html><b>" + namaWisata + "</b></html>");
            JLabel komentarLabel = new JLabel("<html><p style='width:450px;'>" + komentar + "</p></html>");
            JLabel waktuReviewLabel = new JLabel("Dikirim pada: " + createdAt);
            
            textPanel.add(namaWisataLabel);
            textPanel.add(komentarLabel);
            textPanel.add(waktuReviewLabel);
            
            // Panel untuk tombol delete
            JPanel buttonPanel = new JPanel();
            buttonPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
            JButton deleteButton = new JButton("Hapus Review");
            deleteButton.addActionListener(e -> deleteReview(idReview));
            buttonPanel.add(deleteButton);

            // Gabungkan panel gambar, teks, dan tombol delete
            reviewItemPanel.add(imagePanel, BorderLayout.WEST); // Gambar di kiri
            reviewItemPanel.add(textPanel, BorderLayout.CENTER); // Teks di tengah
            reviewItemPanel.add(buttonPanel, BorderLayout.PAGE_END); // Tombol di kanan

            // Menambahkan panel review ke main panel
            reviewPanel.add(reviewItemPanel);
            reviewPanel.add(Box.createVerticalStrut(10)); // Jarak antar review
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading reviews: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    // Refresh panel untuk menampilkan perubahan
    reviewPanel.revalidate();
    reviewPanel.repaint();
    }

    private void deleteReview(String idReview) {
        int confirm = JOptionPane.showConfirmDialog(this, "Yakin ingin menghapus review ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "");
                 PreparedStatement stmt = conn.prepareStatement("DELETE FROM reviews WHERE id_review = ?")) {

                stmt.setString(1, idReview);
                stmt.executeUpdate();

                JOptionPane.showMessageDialog(this, "Review berhasil dihapus.");
                loadReviews(); // Refresh daftar review

            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Gagal menghapus review: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        loadReviews();
    }
    
    private void loadProfilePanel(){
        String uname = Session.getUsername();
        String namaLengkap = Session.getNama();
        
        newUsernameField.setText(uname);
        newNamaLengkapField.setText(namaLengkap);
    }
    
    private void changeUserNameProfile() {
        String newUser = newUsernameField.getText().trim();
        String newName = newNamaLengkapField.getText().trim();
        String currentUser = Session.getUsername();
        String userID = Session.getUserID(); // Ambil userID dari sesi

        // Validasi input
        if (newUser.isEmpty() || newName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Username dan Nama Lengkap tidak boleh kosong!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/visit_indonesia", "root", "")) {
            if (newUser.equals(currentUser)) {
                // Jika username tetap sama, hanya update nama
                String sql = "UPDATE users SET nama_lengkap = ? WHERE id = ?";
                try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                    stmt.setString(1, newName);
                    stmt.setString(2, userID);

                    int rowsUpdated = stmt.executeUpdate();
                    if (rowsUpdated > 0) {
                        JOptionPane.showMessageDialog(this, "Nama berhasil diperbarui!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                        nameUserlabel.setText("Welcome, " + Session.getNama() + "!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Tidak ada perubahan yang dilakukan.", "Info", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } else {
                // Jika username berbeda, update username dan nama
                String sql = "UPDATE users SET username = ?, nama_lengkap = ? WHERE id = ?";
                try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                    stmt.setString(1, newUser);
                    stmt.setString(2, newName);
                    stmt.setString(3, userID);

                    int rowsUpdated = stmt.executeUpdate();
                    if (rowsUpdated > 0) {
                        // Perbarui username di sesi
                        Session.setUsername(newUser);
                        JOptionPane.showMessageDialog(this, "Username dan Nama berhasil diganti! Anda akan logout", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                        logout(); // Panggil fungsi logout
                    } else {
                        JOptionPane.showMessageDialog(this, "Tidak ada perubahan yang dilakukan.", "Info", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Kesalahan koneksi database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }





    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addReviewWishlistButton;
    private javax.swing.JButton addtoWishlistButton;
    private javax.swing.JLabel alamatWisataLabel;
    private javax.swing.JButton backtoIndexButton;
    private javax.swing.JLabel bgimage;
    private javax.swing.JButton changePassBtn;
    private javax.swing.JLabel deskripsiWisatalabel;
    private javax.swing.JPanel detailWisataPanel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel gambarLabel;
    private javax.swing.JPanel home;
    private javax.swing.JButton homeButton;
    private javax.swing.JPanel inProfilePanel;
    private javax.swing.JPanel indexWisataPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel listWisataPanel;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel namaWisataLabel;
    private javax.swing.JLabel nameUserlabel;
    private javax.swing.JTextField newNamaLengkapField;
    private javax.swing.JPasswordField newPassField;
    private javax.swing.JTextField newUsernameField;
    private javax.swing.JPasswordField newrePassField;
    private javax.swing.JComboBox<String> pilihProvinsi;
    private javax.swing.JButton profileButton;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JLabel provkotaLabel;
    private javax.swing.JPanel reviewPanel;
    private javax.swing.JPanel reviewWisataPanel;
    private javax.swing.JButton saveNewProfileBtn;
    private javax.swing.JCheckBox showPassChangeChk;
    private javax.swing.JLabel usernamaWarning1;
    private javax.swing.JButton wishlistButton;
    private javax.swing.JPanel wishlistPanel;
    // End of variables declaration//GEN-END:variables
}
